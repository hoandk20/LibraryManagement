/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import DAO.authorDAO;
import DAO.bookDAO;
import DAO.categoryDAO;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.author;
import model.book;
import model.category;

/**
 *
 * @author hoand
 */
public class FrmShowBook extends javax.swing.JInternalFrame {

    /**
     * Creates new form FrmShowBook
     */
    DefaultTableModel model;
    
    check check = new check();
    
    public FrmShowBook() {
        initComponents();
        model = (DefaultTableModel) tbBook.getModel();
        showTable();
        showAuthor();
        showCategory();
        
    }
    
    void showTable() {
        clearTable();
        bookDAO bDAO = new bookDAO();
        ArrayList<book> list = bDAO.getAllbook();
        for (book o : list) {
            Object[] a = {o.getId(), o.getName(), o.getQuantity(), o.getCate().getCateName(), o.getAuthor().getAuthorName()};
            model.addRow(a);
            
        }
    }
    
    void clearTable() {
        model.getDataVector().removeAllElements();
    }
    
    public void showAuthor() {
        authorDAO aDAO = new authorDAO();
        ArrayList<author> list = aDAO.getAllAuthors();
        for (author o : list) {
            cbAuthor.addItem(o.getAuthorName());
        }
    }
    
    public void showCategory() {
        categoryDAO cDAO = new categoryDAO();
        ArrayList<category> list = cDAO.getAllCate();
        for (category o : list) {
            cbCate.addItem(o.getCateName());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbBook = new javax.swing.JTable();
        btnExit = new javax.swing.JButton();
        checkboxAuthor = new javax.swing.JCheckBox();
        CheckboxCate = new javax.swing.JCheckBox();
        cbCate = new javax.swing.JComboBox<>();
        cbAuthor = new javax.swing.JComboBox<>();
        btnShow = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        tbBook.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sách", "Tên sách", "Số lượng", "Thể loại", "Tác giả"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbBook);

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        checkboxAuthor.setText("Tác giả");

        CheckboxCate.setText("Thể loại");

        btnShow.setText("Show");
        btnShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowActionPerformed(evt);
            }
        });

        btnSearch.setText("Tìm");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnRemove.setText("Xóa");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        jLabel1.setText("Chọn 1 hàng để xóa");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 655, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 281, Short.MAX_VALUE)
                        .addComponent(btnExit))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnSearch))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cbCate, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(CheckboxCate))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cbAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(checkboxAuthor)))
                                .addGap(30, 30, 30)
                                .addComponent(btnShow))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRemove)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSearch))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(checkboxAuthor)
                                        .addComponent(cbAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(CheckboxCate))
                                .addComponent(cbCate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnShow)))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(btnRemove))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnExit)))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowActionPerformed
        try {
            clearTable();
            bookDAO bDAO = new bookDAO();
            authorDAO aDAO = new authorDAO();
            categoryDAO cDAO = new categoryDAO();
            String author = cbAuthor.getSelectedItem().toString();
            String cate = cbCate.getSelectedItem().toString();
            
            int authorId = aDAO.getAuthor(author).getAuthorID();
            int cateId = cDAO.getCate(cate).getCateId();
            
            ArrayList<book> list = new ArrayList<>();
            if (checkboxAuthor.isSelected() == true && CheckboxCate.isSelected() == false) {
                //get book by author
                list = bDAO.getAllbookByAuthor(authorId);
                if (list.size() == 0) {
                    JOptionPane.showMessageDialog(this, "Không tìm thấy!");
                    return;
                }
            } else if (checkboxAuthor.isSelected() == false && CheckboxCate.isSelected() == true) {
                //get book by category
                list = bDAO.getAllbookByCate(cateId);
                if (list.size() == 0) {
                    JOptionPane.showMessageDialog(this, "Không tìm thấy!");
                    return;
                }
            } else if (checkboxAuthor.isSelected() == true && CheckboxCate.isSelected() == true) {
                //get book by both
                list = bDAO.getAllbookByAuthorandCate(authorId, cateId);
                if (list.size() == 0) {
                    JOptionPane.showMessageDialog(this, "Không tìm thấy!");
                    return;
                }
            } else {
                list = bDAO.getAllbook();
                if (list.size() == 0) {
                    JOptionPane.showMessageDialog(this, "Không tìm thấy!");
                    return;
                }
            }
            for (book o : list) {
                Object[] a = {o.getId(), o.getName(), o.getQuantity(), o.getCate().getCateName(), o.getAuthor().getAuthorName()};
                model.addRow(a);
                
            }
        } catch (Exception e) {
            clearTable();
            JOptionPane.showMessageDialog(this, "error");
        }
    }//GEN-LAST:event_btnShowActionPerformed
    
    void showTablebybookName(String txt) {
        clearTable();
        bookDAO bDAO = new bookDAO();
        ArrayList<book> list = bDAO.getAllbookByName(txt);
        if (list.size() == 0) {
            JOptionPane.showMessageDialog(this, "Không tìm thấy!");
            return;
        }
        for (book o : list) {
            Object[] a = {o.getId(), o.getName(), o.getQuantity(), o.getCate().getCateName(), o.getAuthor().getAuthorName()};
            model.addRow(a);
            
        }
    }
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String txt = txtSearch.getText();
        showTablebybookName(txt);
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        String remove = "";
        try {
            int row = tbBook.getSelectedRow();
            remove = tbBook.getValueAt(row, 0).toString().trim();
            int dialogButton = JOptionPane.YES_NO_OPTION;
            dialogButton = JOptionPane.showConfirmDialog(null, "bạn có muốn xóa " + remove + "?", "Warning", dialogButton);
            if (dialogButton == JOptionPane.YES_OPTION) {
                
            } else {
                return;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Bạn phải chọn một hàng trong bảng!");
            return;
        }
        
        if (check.checkvalidString(remove)) {
            
            bookDAO bDAO = new bookDAO();
            if (bDAO.remove(Integer.parseInt(remove))) {
                JOptionPane.showMessageDialog(null, "xoá thành công!");
            } else {
                JOptionPane.showMessageDialog(null, "Lỗi!");
            }
            
        }
        showTable();
    }//GEN-LAST:event_btnRemoveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox CheckboxCate;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnShow;
    private javax.swing.JComboBox<String> cbAuthor;
    private javax.swing.JComboBox<String> cbCate;
    private javax.swing.JCheckBox checkboxAuthor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbBook;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

}
